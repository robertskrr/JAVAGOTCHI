package javagotchi;

import java.time.format.DateTimeParseException;
import java.util.*;

/**
 * @author Robert
 * @version 1.0
 * @since 16/05
 */
public class AppJavagotchi {

	private static UsuarioDAO bdUsuarios = new UsuarioDAO();

	private static MascotaDAO bdMascotas = new MascotaDAO();

	private static ComidaDAO bdComidas = new ComidaDAO();

	private static JuegoDAO bdJuegos = new JuegoDAO();

	private static Scanner sc = new Scanner(System.in);

	private static ColorAnsi color = new ColorAnsi();

	/**
	 * M√©todo main
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		int opcion = 0;

		do {
			try {
				mostrarMenuPpal();

				System.out.print(color.getAnsi("AMARILLO") + "‚≠ê OPCI√ìN: " + color.getAnsi("RESET"));
				opcion = sc.nextInt();
				sc.nextLine(); // Limpiar buffer

				switch (opcion) {
				case 1:
					crearUsuario();
					break;
				case 2:
					listaUsuarios();
					break;
				case 3:
					buscarUsuario();
					break;
				case 4:
					modificarUsuario();
					break;
				case 5:
					eliminarUsuario();
					break;
				case 6:
					accesoMenuMascotas();
					break;
				case 7:
					finalizarPrograma();
					break;
				default:
					System.err.println("‚òπERROR‚òπ. Opci√≥n no v√°lida.");
				}
			} catch (InputMismatchException e) {
				System.err.println("‚òπERROR‚òπ. Introduce un n√∫mero por favor.");
				sc.nextLine(); // Limpiar buffer
			}
		} while (opcion != 7);

	}

	/**
	 * Muestra el men√∫ principal
	 */
	public static void mostrarMenuPpal() {
		System.out.println("\n" + color.getAnsi("NARANJA")
				+ "     ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó\r\n"
				+ "     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë\r\n"
				+ "     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë\r\n"
				+ "‚ñà‚ñà   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë\r\n"
				+ "‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë\r\n"
				+ " ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù"
				+ color.getAnsi("RESET"));
		System.out.println(color.getAnsi("AMARILLO") + "‚≠ê‚≠ê ELIGE UNA OPCI√ìN ‚≠ê‚≠ê" + color.getAnsi("RESET"));
		System.out.println("1. üë§ Crear usuario üë§");
		System.out.println("2. üë• Listar usuarios üë•");
		System.out.println("3. üîé Buscar usuario üîé");
		System.out.println("4. ‚öô Modificar tu usuario ‚öô");
		System.out.println("5. ‚òπ Eliminar tu usuario ‚òπ");
		System.out.println("6. üê∂ Men√∫ de mascotas üê∂");
		System.out.println("7. üö´ SALIR üö´");
	}

	/**
	 * Crea un usuario y lo a√±ade a la BD
	 */
	public static void crearUsuario() {
		try {
			System.out.println(color.getAnsi("NARANJA") + "\nüë§ CREACI√ìN DE USUARIO üë§" + color.getAnsi("RESET"));
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Username: " + color.getAnsi("RESET"));
			String username = sc.nextLine();
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Contrase√±a: " + color.getAnsi("RESET"));
			String contrasenia = sc.nextLine();
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Nombre completo: " + color.getAnsi("RESET"));
			String nombreCompleto = sc.nextLine();
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Email: " + color.getAnsi("RESET"));
			String email = sc.nextLine();
			System.out
					.print(color.getAnsi("AMARILLO") + "‚≠ê Fecha de nacimiento (yyyy-MM-dd): " + color.getAnsi("RESET"));
			String fechaNac = sc.nextLine();
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Ciudad: " + color.getAnsi("RESET"));
			String ciudad = sc.nextLine();

			Usuario usuarioNew = new Usuario(username, contrasenia, nombreCompleto, email, fechaNac, ciudad);
			// Si coincide con alg√∫n username de la BD
			if (bdUsuarios.listaUsuarios().contains(usuarioNew)) {
				System.err.println("‚òπERROR‚òπ. Ya existe otro usuario con el mismo username.");
				return;
			}
			// Lo a√±ade a la BD
			bdUsuarios.create(usuarioNew);
		} catch (DateTimeParseException e) {
			System.err.println("‚òπERROR‚òπ. Fecha no v√°lida --> (yyyy-MM-dd)");
			return;
		}
	}

	/**
	 * Muestra los usuarios en el orden asignado
	 */
	public static void listaUsuarios() {
		try {
			System.out.println(color.getAnsi("NARANJA") + "\nüë• USUARIOS DE JAVAGOTCHI üë•" + color.getAnsi("RESET"));
			System.out.println("\t1. Ordenados por username.");
			System.out.println("\t2. Ordenados por fecha de registro.");
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê ELIGE EL ORDEN: " + color.getAnsi("RESET"));
			int opcionOrden = sc.nextInt();
			sc.nextLine();
			switch (opcionOrden) {
			case 1:
				System.out.println(
						color.getAnsi("NARANJA") + "üë• USUARIOS ORDENADOS POR USERNAME üë•" + color.getAnsi("RESET"));
				listaUsuariosOrdenUsername(bdUsuarios.listaUsuarios()).forEach(Usuario::mostrarInfoLista);
				break;
			case 2:
				System.out.println(color.getAnsi("NARANJA") + "üë• USUARIOS ORDENADOS POR FECHA DE REGISTRO üë•"
						+ color.getAnsi("RESET"));
				listaUsuariosOrdenFechaRegistro(bdUsuarios.listaUsuarios()).forEach(Usuario::mostrarInfoLista);
				break;
			default:
				System.err.println("‚òπERROR‚òπ. Opci√≥n de orden no v√°lida.");
			}
		} catch (InputMismatchException e) {
			System.err.println("‚òπERROR‚òπ. Introduce un n√∫mero por favor.");
			sc.nextLine(); // Limpia buffer
			return;
		}
	}

	/**
	 * Devuelve la lista de usuarios ordenadas por username
	 * 
	 * @param listaOriginal
	 * @return
	 */
	public static List<Usuario> listaUsuariosOrdenUsername(ArrayList<Usuario> listaOriginal) {
		return listaOriginal.stream()
				.sorted()
				.toList();
	}

	/**
	 * Devuelve la lista de usuarios ordenadas por fecha de registro
	 * 
	 * @param listaOriginal
	 * @return
	 */
	public static List<Usuario> listaUsuariosOrdenFechaRegistro(ArrayList<Usuario> listaOriginal) {
		return listaOriginal.stream()
				.sorted(Comparator.comparing(Usuario::getFechaRegistro))
				.toList();
	}

	/**
	 * Chequea si el usuario introducido existe en la BD
	 * 
	 * @param username
	 * @return
	 */
	public static boolean existeUsuario(String username) {
		if (bdUsuarios.read(username) == null) {
			System.err.println("‚òπ No hay ninguna coincidencia con el username '" + username + "' ‚òπ");
			return false;
		}
		return true;
	}

	/**
	 * Busca a un usuario en la BD
	 */
	public static void buscarUsuario() {
		System.out.println(color.getAnsi("NARANJA") + "\nüîé B√öSQUEDA DE USUARIO üîé" + color.getAnsi("RESET"));
		System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Introduce el username a buscar: " + color.getAnsi("RESET"));
		String usernameBusca = sc.nextLine();
		Usuario usuarioBusca = bdUsuarios.read(usernameBusca);
		if (!existeUsuario(usernameBusca)) {
			return;
		}
		System.out.println(color.getAnsi("VERDE") + "‚≠ê !USUARIO ENCONTRADO! ‚≠ê" + color.getAnsi("RESET"));
		usuarioBusca.mostrarInfo();
	}

	/**
	 * Autenticaci√≥n de usuario
	 * 
	 * @param username
	 * @param contrasenia
	 * @return
	 */
	public static boolean contraseniaCorrecta(Usuario usuario, String contrasenia) {
		if (!usuario.getContrasenia().equals(contrasenia)) {
			System.err.println("‚òπ ¬°CONTRASE√ëA INCORRECTA! ‚òπ");
			return false;
		}
		return true;
	}

	/**
	 * Modifica los datos del usuario
	 */
	public static void modificarUsuario() {
		System.out.println(color.getAnsi("NARANJA") + "\n‚öô MODIFICACI√ìN DE USUARIO ‚öô" + color.getAnsi("RESET"));
		System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Introduce el username del usuario a modificar: "
				+ color.getAnsi("RESET"));
		String usernameOriginal = sc.nextLine();
		if (!existeUsuario(usernameOriginal)) {
			return;
		}
		Usuario usuarioOriginal = bdUsuarios.read(usernameOriginal);
		// Pide autenticaci√≥n del usuario
		System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Introduce la contrase√±a actual para poder modificar: "
				+ color.getAnsi("RESET"));
		String contrasenia = sc.nextLine();
		if (!contraseniaCorrecta(usuarioOriginal, contrasenia)) {
			return;
		}
		try {
			System.out.println(color.getAnsi("VERDE") + "‚úÖ USUARIO AUTENTICADO ‚úÖ" + color.getAnsi("RESET"));
			System.out.println(color.getAnsi("AMARILLO")
					+ "‚≠ê INTRODUCE LOS DATOS A MODIFICAR (O INTRO SI NO DESEA MODIFICAR EL CAMPO) ‚≠ê"
					+ color.getAnsi("RESET"));
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Nuevo username: " + color.getAnsi("RESET"));
			String usernameNew = sc.nextLine();
			// Si el campo est√° vacio recupera los datos del usuario original
			if (usernameNew.isEmpty()) {
				usernameNew = usuarioOriginal.getUsername();
			}
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Nueva contrase√±a: " + color.getAnsi("RESET"));
			String contraseniaNew = sc.nextLine();
			if (contraseniaNew.isEmpty()) {
				contraseniaNew = usuarioOriginal.getContrasenia();
			}
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Nuevo nombre completo: " + color.getAnsi("RESET"));
			String nombreCompletoNew = sc.nextLine();
			if (nombreCompletoNew.isEmpty()) {
				nombreCompletoNew = usuarioOriginal.getNombreCompleto();
			}
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Nuevo email: " + color.getAnsi("RESET"));
			String emailNew = sc.nextLine();
			if (emailNew.isEmpty()) {
				emailNew = usuarioOriginal.getEmail();
			}
			System.out.print(
					color.getAnsi("AMARILLO") + "‚≠ê Nueva fecha de nacimiento (yyyy-MM-dd): " + color.getAnsi("RESET"));
			String fechaNacNew = sc.nextLine();
			if (fechaNacNew.isEmpty()) {
				fechaNacNew = String.valueOf(usuarioOriginal.getFechaNac());
			}
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Nueva ciudad: " + color.getAnsi("RESET"));
			String ciudadNew = sc.nextLine();
			if (ciudadNew.isEmpty()) {
				ciudadNew = usuarioOriginal.getCiudad();
			}

			Usuario usuarioUpdate = new Usuario(usernameNew, contraseniaNew, nombreCompletoNew, emailNew, fechaNacNew,
					ciudadNew);

			if (bdUsuarios.listaUsuarios().contains(usuarioUpdate)) {
				System.err.println("‚òπERROR‚òπ. Ya existe otro usuario con el mismo username.");
				return;
			}
			bdUsuarios.update(usuarioUpdate, usernameOriginal);

		} catch (DateTimeParseException e) {
			System.err.println("‚òπERROR‚òπ. Fecha no v√°lida --> (yyyy-MM-dd)");
			return;
		}

	}

	/**
	 * Elimina al usuario y sus mascotas de la BD
	 */
	public static void eliminarUsuario() {
		System.out.println(color.getAnsi("NARANJA") + "\n‚òπ ELIMINACI√ìN DE USUARIO ‚òπ" + color.getAnsi("RESET"));
		System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Introduce tu username: " + color.getAnsi("RESET"));
		String usernameDelete = sc.nextLine();
		if (!existeUsuario(usernameDelete)) {
			return;
		}
		Usuario usuarioDelete = bdUsuarios.read(usernameDelete);
		// Pide autenticaci√≥n del usuario
		System.out.print(
				color.getAnsi("AMARILLO") + "‚≠ê Introduce tu contrase√±a para poder eliminar: " + color.getAnsi("RESET"));
		String contrasenia = sc.nextLine();
		if (!contraseniaCorrecta(usuarioDelete, contrasenia)) {
			return;
		}
		System.out.println(color.getAnsi("CIAN")
				+ "¬øEST√ÅS SEGURO DE ELIMINAR TU USUARIO? ESTO IMPLICA TAMBI√âN BORRAR A TUS MASCOTAS.");
		System.out.print(color.getAnsi("AMARILLO")
				+ "‚≠ê Introduce la contrase√±a nuevamente para confirmar la eliminaci√≥n: " + color.getAnsi("RESET"));
		contrasenia = sc.nextLine();
		if (!contraseniaCorrecta(usuarioDelete, contrasenia)) {
			System.err.println("üôÇ ¬°ELIMINACI√ìN CANCELADA! üôÇ");
			return;
		}
		bdUsuarios.delete(usernameDelete);
	}

	/**
	 * Accede al men√∫ pidiendo username y contrase√±a
	 */
	public static void accesoMenuMascotas() {
		System.out.println(color.getAnsi("NARANJA") + "\nüê∂ ACCESO A MEN√ö DE MASCOTAS üê∂" + color.getAnsi("RESET"));
		System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Introduce tu username: " + color.getAnsi("RESET"));
		String username = sc.nextLine();
		if (!existeUsuario(username)) {
			return;
		}
		Usuario usuario = bdUsuarios.read(username);
		System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Introduce tu contrase√±a: " + color.getAnsi("RESET"));
		String contrasenia = sc.nextLine();
		if (!contraseniaCorrecta(usuario, contrasenia)) {
			return;
		}
		int opcion = 0;
		do {
			try {
				mostrarMenuMascotas(usuario);
				System.out.print(color.getAnsi("AMARILLO") + "‚≠ê OPCI√ìN: " + color.getAnsi("RESET"));
				opcion = sc.nextInt();
				sc.nextLine(); // Limpiar buffer
				switch (opcion) {
				case 1:
					accesoMenuInteraccionMascotas(usuario);
					break;
				case 2:
					listarMascotas(usuario);
					break;
				case 3:
					buscarMascota(usuario);
					break;
				case 4:
					crearMascota(usuario);
					break;
				case 5:
					eliminarMascota(usuario);
					break;
				case 6:
					System.out.println(
							color.getAnsi("NARANJA") + "‚≠ê Volviendo al men√∫ principal..." + color.getAnsi("RESET"));
					break;
				default:
					System.err.println("‚òπERROR‚òπ. Opci√≥n no v√°lida.");
				}
			} catch (InputMismatchException e) {
				System.err.println("‚òπERROR‚òπ. Introduce un n√∫mero por favor.");
				sc.nextLine(); // Limpiar buffer
			}

		} while (opcion != 6);

	}

	/**
	 * Muestra el men√∫ del usuario con respecto a sus mascotas
	 */
	public static void mostrarMenuMascotas(Usuario usuario) {
		System.out.println(color.getAnsi("CIAN") + "\n  __  __    _    ____   ____ ___ _____  _    ____  \r\n"
				+ " |  \\/  |  / \\  / ___| / ___/ _ \\_   _|/ \\  / ___| \r\n"
				+ " | |\\/| | / _ \\ \\___ \\| |  | | | || | / _ \\ \\___ \\ \r\n"
				+ " | |  | |/ ___ \\ ___) | |__| |_| || |/ ___ \\ ___) |\r\n"
				+ " |_|  |_/_/   \\_\\____/ \\____\\___/ |_/_/   \\_\\____/ \r"
				+ "                                                   " + color.getAnsi("RESET"));
		System.out.println(color.getAnsi("CIAN") + "üë§ Sesi√≥n iniciada de '" + usuario.getUsername().toUpperCase()
				+ "' üë§" + color.getAnsi("RESET"));
		System.out.println(color.getAnsi("AMARILLO") + "‚≠ê‚≠ê ELIGE UNA OPCI√ìN ‚≠ê‚≠ê" + color.getAnsi("RESET"));
		System.out.println("1. üê± JUGAR üê±");
		System.out.println("2. üê• Listar mascotas üê•");
		System.out.println("3. üîé Buscar mascota üîé");
		System.out.println("4. üê∂ Crear mascota üê∂");
		System.out.println("5. ‚òπ Eliminar mascota ‚òπ");
		System.out.println("6. üö´ Volver al men√∫ principal üö´");
	}

	/**
	 * Controla el acceso al men√∫ de interacci√≥n con las mascotas del usuario
	 * 
	 * @param usuario
	 */
	public static void accesoMenuInteraccionMascotas(Usuario usuario) {
		if (bdMascotas.listaMascotas(usuario.getUsername()).isEmpty()) {
			System.err.println("‚òπA√öN NO HAY MASCOTAS REGISTRADAS PARA PODER JUGAR‚òπ");
			return;
		}
		System.out.println(color.getAnsi("NARANJA") + "\nüê± JUGAR üê±" + color.getAnsi("RESET"));
		System.out.println(color.getAnsi("AMARILLO") + "‚≠ê Mostrando a tus mascotas..." + color.getAnsi("RESET"));
		// Muestra a tus mascotas en orden de creaci√≥n para seleccionar el ID
		// correspondiente
		listaMascotasOrdenFechaCreacion(bdMascotas.listaMascotas(usuario.getUsername())).forEach(Mascota::mostrarInfo);
		System.out.print(color.getAnsi("AMARILLO")
				+ "‚≠ê ID de la mascota con la que quieres jugar (o -1 para volver atr√°s): " + color.getAnsi("RESET"));
		int idJugar;
		try {
			idJugar = sc.nextInt();
			sc.nextLine();
		} catch (InputMismatchException e) {
			System.err.println("‚òπERROR‚òπ. Introduce un n√∫mero por favor.");
			sc.nextLine(); // Limpia buffer
			return;
		}

		if (idJugar == -1) {
			System.out
					.println(color.getAnsi("NARANJA") + "‚≠ê Volviendo al men√∫ de mascotas..." + color.getAnsi("RESET"));
			return;
		}
		Mascota mascotaJugar = bdMascotas.read(idJugar, usuario.getUsername());
		if (mascotaJugar == null) {
			System.err.println("‚òπNO HAY NINGUNA MASCOTA DEL USUARIO '" + usuario.getUsername().toUpperCase()
					+ "' REGISTRADA CON EL ID '" + idJugar + "'‚òπ");
			return;
		}
		// MEN√ö DE INTERACCI√ìN
		int opcion = 0;
		do {
			try {
				// Siempre recoge a la mascota actualizada de la BD
				mascotaJugar = bdMascotas.read(idJugar, usuario.getUsername());
				mostrarMenuInteraccionMascotas(mascotaJugar);
				mascotaJugar.alertasEstadisticas();
				System.out.print(color.getAnsi("AMARILLO") + "‚≠ê OPCI√ìN: " + color.getAnsi("RESET"));
				opcion = sc.nextInt();
				sc.nextLine(); // Limpiar buffer
				switch (opcion) {
				case 1:
					mascotaJugar.mostrarMovimiento();
					break;
				case 2:
					alimentarMascota(mascotaJugar);
					break;
				case 3:
					jugarConMascota(mascotaJugar);
					break;
				case 4:
					limpiarMascota(mascotaJugar);
					break;
				case 5:
					System.out.println(
							color.getAnsi("NARANJA") + "‚≠ê Volviendo al men√∫ de mascotas..." + color.getAnsi("RESET"));
					break;
				default:
					System.err.println("‚òπERROR‚òπ. Opci√≥n no v√°lida.");
				}

			} catch (InputMismatchException e) {
				System.err.println("‚òπERROR‚òπ. Introduce un n√∫mero por favor.");
				sc.nextLine(); // Limpia buffer
			}
		} while (opcion != 5);
	}

	/**
	 * Muestra el men√∫ de interacci√≥n de cada mascota
	 */
	public static void mostrarMenuInteraccionMascotas(Mascota mascota) {
		mascota.mostrarInfoDetallado();
		System.out.println(color.getAnsi("AMARILLO") + "\n‚≠ê‚≠ê ELIGE UNA OPCI√ìN ‚≠ê‚≠ê" + color.getAnsi("RESET"));
		System.out.println("1. üëÄ Observar mascota üëÄ");
		System.out.println("2. ü•¶ Alimentar ü•¶");
		System.out.println("3. ü•é Jugar ü•é");
		System.out.println("4. üßΩ Ba√±ar üßΩ");
		System.out.println("5. üö´ Volver al men√∫ de mascotas üö´");
	}

	/**
	 * Muestra las mascotas en el orden asignado
	 */
	public static void listarMascotas(Usuario usuario) {
		if (bdMascotas.listaMascotas(usuario.getUsername()).isEmpty()) {
			System.err.println("‚òπA√öN NO HAY MASCOTAS REGISTRADAS PARA PODER LISTAR‚òπ");
			return;
		}
		try {
			System.out.println(color.getAnsi("NARANJA") + "\nüê• MASCOTAS DE " + usuario.getUsername().toUpperCase()
					+ " üê•" + color.getAnsi("RESET"));
			System.out.println("\t1. Ordenadas por nombre.");
			System.out.println("\t2. Ordenadas por tipo.");
			System.out.println("\t3. Ordenadas por fecha de creaci√≥n.");
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê ELIGE EL ORDEN: " + color.getAnsi("RESET"));
			int opcionOrden = sc.nextInt();
			sc.nextLine();
			switch (opcionOrden) {
			case 1:
				System.out.println(
						color.getAnsi("NARANJA") + "üê• MASCOTAS ORDENADAS POR NOMBRE üê•" + color.getAnsi("RESET"));
				listaMascotasOrdenNombre(bdMascotas.listaMascotas(usuario.getUsername()))
				.forEach(Mascota::mostrarInfo);
				break;
			case 2:
				System.out.println(
						color.getAnsi("NARANJA") + "üê• MASCOTAS ORDENADAS POR TIPO üê•" + color.getAnsi("RESET"));
				listaMascotasOrdenTipo(bdMascotas.listaMascotas(usuario.getUsername()))
				.forEach(Mascota::mostrarInfo);
				break;
			case 3:
				System.out.println(color.getAnsi("NARANJA") + "üê• MASCOTAS ORDENADAS POR FECHA DE CREACI√ìN üê•"
						+ color.getAnsi("RESET"));
				listaMascotasOrdenFechaCreacion(bdMascotas.listaMascotas(usuario.getUsername()))
						.forEach(Mascota::mostrarInfo);
				break;
			default:
				System.err.println("‚òπERROR‚òπ. Opci√≥n de orden no v√°lida.");
			}
		} catch (InputMismatchException e) {
			System.err.println("‚òπERROR‚òπ. Introduce un n√∫mero por favor.");
			sc.nextLine(); // Limpia buffer
			return;
		}
	}

	/**
	 * Devuelve la lista de mascotas ordenadas por nombre
	 * 
	 * @param listaOriginal
	 * @return
	 */
	public static List<Mascota> listaMascotasOrdenNombre(ArrayList<Mascota> listaOriginal) {
		return listaOriginal.stream()
				.sorted()
				.toList();
	}

	/**
	 * Devuelve la lista de usuarios ordenadas por tipo, cuando sean iguales ordena
	 * por nombre
	 * 
	 * @param listaOriginal
	 * @return
	 */
	public static List<Mascota> listaMascotasOrdenTipo(ArrayList<Mascota> listaOriginal) {
		return listaOriginal.stream()
				.sorted(Comparator.comparing(Mascota::getTipo)
				.thenComparing(Comparator.naturalOrder()))
				.toList();
	}

	/**
	 * Devuelve la lista de usuarios ordenadas por fecha de creacion, cuando sean
	 * iguales ordena por ID
	 * 
	 * @param listaOriginal
	 * @return
	 */
	public static List<Mascota> listaMascotasOrdenFechaCreacion(ArrayList<Mascota> listaOriginal) {
		return listaOriginal.stream()
				.sorted(Comparator.comparing(Mascota::getFechaCreacion)
				.thenComparing(Mascota::getId))
				.toList();
	}

	/**
	 * Busca a la mascota del usuario
	 */
	public static void buscarMascota(Usuario usuario) {
		if (bdMascotas.listaMascotas(usuario.getUsername()).isEmpty()) {
			System.err.println("‚òπA√öN NO HAY MASCOTAS REGISTRADAS PARA PODER BUSCAR‚òπ");
			return;
		}
		System.out.println(color.getAnsi("NARANJA") + "\nüîé B√öSQUEDA DE MASCOTA üîé" + color.getAnsi("RESET"));
		System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Introduce el nombre a buscar: " + color.getAnsi("RESET"));
		String nombreBusca = sc.nextLine();
		// Devuelve una lista por si hay m√°s de una mascota del usuario con el mismo
		// nombre
		ArrayList<Mascota> mascotasCoincidencia = bdMascotas.buscarMascotas(nombreBusca, usuario.getUsername());
		if (mascotasCoincidencia.isEmpty()) {
			System.err.println("‚òπNO HAY NINGUNA COINCIDENCIA CON EL NOMBRE DE LA MASCOTA '" + nombreBusca + "'‚òπ");
			return;
		}
		System.out.println(color.getAnsi("VERDE") + "‚≠ê ¬°MASCOTA ENCONTRADA! ‚≠ê" + color.getAnsi("RESET"));
		mascotasCoincidencia.stream().forEach(Mascota::mostrarInfo);
	}

	/**
	 * Creaci√≥n de mascota del usuario
	 */
	public static void crearMascota(Usuario usuario) {
		try {
			System.out.println(color.getAnsi("NARANJA") + "\nüê∂ CREACI√ìN DE MASCOTA üê∂" + color.getAnsi("RESET"));
			Mascota mascota;
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Nombre de la mascota: " + color.getAnsi("RESET"));
			String nombre = sc.nextLine();
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Tipo de mascota (1. Perro, 2. Gato, 3. P√°jaro): "
					+ color.getAnsi("RESET"));
			int opcionTipo = sc.nextInt();
			sc.nextLine(); // Limpia buffer
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Sexo de la mascota (1. Macho, 2. Hembra): "
					+ color.getAnsi("RESET"));
			int opcionSexo = sc.nextInt();
			sc.nextLine(); // Limpia buffer
			String sexo;
			switch (opcionSexo) {
			case 1:
				sexo = "MACHO";
				break;
			case 2:
				sexo = "HEMBRA";
				break;
			default:
				System.err.println("‚òπERROR‚òπ. Opci√≥n de sexo no v√°lida.");
				return;
			}
			// Creamos la mascota por el tipo elegido
			switch (opcionTipo) {
			case 1:
				mascota = new Perro(nombre, usuario.getUsername(), sexo);
				break;
			case 2:
				mascota = new Gato(nombre, usuario.getUsername(), sexo);
				break;
			case 3:
				mascota = new Pajaro(nombre, usuario.getUsername(), sexo);
				break;
			default:
				System.err.println("‚òπERROR‚òπ. Opci√≥n de tipo no v√°lida.");
				return;
			}
			// Inserta la mascota en la BD
			bdMascotas.create(mascota);
		} catch (InputMismatchException e) {
			System.err.println("‚òπERROR‚òπ. Introduce un n√∫mero por favor.");
			sc.nextLine(); // Limpia buffer
			return;
		}
	}

	/**
	 * Elimina a la mascota del usuario de la BD
	 * 
	 * @param usuario
	 */
	public static void eliminarMascota(Usuario usuario) {
		if (bdMascotas.listaMascotas(usuario.getUsername()).isEmpty()) {
			System.err.println("‚òπA√öN NO HAY MASCOTAS REGISTRADAS PARA PODER ELIMINAR‚òπ");
			return;
		}
		try {
			System.out.println(color.getAnsi("NARANJA") + "\n‚òπ ELIMINACI√ìN DE MASCOTA ‚òπ" + color.getAnsi("RESET"));
			System.out.println(color.getAnsi("AMARILLO") + "‚≠ê Mostrando a tus mascotas..." + color.getAnsi("RESET"));
			// Muestra a tus mascotas en orden de creaci√≥n para seleccionar el ID
			// correspondiente
			listaMascotasOrdenFechaCreacion(bdMascotas.listaMascotas(usuario.getUsername()))
					.forEach(Mascota::mostrarInfo);
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê ID de la mascota a eliminar (o -1 para volver atr√°s): "
					+ color.getAnsi("RESET"));
			int idEliminar = sc.nextInt();
			sc.nextLine();
			if (idEliminar == -1) {
				System.err.println("üôÇ ¬°ELIMINACI√ìN CANCELADA! üôÇ");
				return;
			}
			Mascota mascotaDelete = bdMascotas.read(idEliminar, usuario.getUsername());
			if (mascotaDelete == null) {
				System.err.println("‚òπNO HAY NINGUNA MASCOTA DEL USUARIO '" + usuario.getUsername().toUpperCase()
						+ "' REGISTRADA CON EL ID '" + idEliminar + "'‚òπ");
				return;
			}
			System.out.println(color.getAnsi("CIAN") + "‚¨áÔ∏è‚¨áÔ∏è¬øEST√ÅS SEGURO DE ELIMINAR A TU MASCOTA?‚¨áÔ∏è‚¨áÔ∏è");
			mascotaDelete.mostrarInfo();
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Introduce tu contrase√±a para confirmar la eliminaci√≥n: "
					+ color.getAnsi("RESET"));
			String contraseniaUsuario = sc.nextLine();
			if (!contraseniaCorrecta(usuario, contraseniaUsuario)) {
				System.err.println("üôÇ ¬°ELIMINACI√ìN CANCELADA! üôÇ");
				return;
			}
			bdMascotas.delete(idEliminar);
		} catch (InputMismatchException e) {
			System.err.println("‚òπERROR‚òπ. Introduce un n√∫mero por favor.");
			sc.nextLine(); // Limpia buffer
			return;
		}
	}

	/**
	 * Alimenta a la mascota en funci√≥n de su tipo
	 * 
	 * @param mascota
	 */
	public static void alimentarMascota(Mascota mascota) {
		System.out.println(color.getAnsi("CIAN") + "\nü•¶ ALIMENTACI√ìN DE " + mascota.getNombre().toUpperCase() + " ü•¶"
				+ color.getAnsi("RESET"));
		System.out.println(color.getAnsi("AMARILLO") + "‚¨áÔ∏è‚¨áÔ∏è COMIDAS DISPONIBLES ‚¨áÔ∏è‚¨áÔ∏è" + color.getAnsi("RESET"));
		bdComidas.listaComidas(mascota.getTipo()).forEach(Comida::mostrarInfo);
		System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Introduce el c√≥digo del alimento que quieres dar: "
				+ color.getAnsi("RESET"));
		String codigoComida = sc.nextLine();
		Comida comida = bdComidas.read(codigoComida);
		if (comida == null) {
			System.err.println("‚òπNO HAY NINGUNA COINCIDENCIA CON EL C√ìDIGO '" + codigoComida + "'‚òπ");
			return;
		}
		// Comprueba en el caso de existir que sea para el tipo de mascota
		if (!comida.getTipoMascota().equalsIgnoreCase(mascota.getTipo())) {
			System.err.println("‚òπEL C√ìDIGO INTRODUCIDO NO CORRESPONDE AL TIPO DE TU MASCOTA‚òπ");
			return;
		}
		// Si la mascota est√° llena vuelve atr√°s
		if (!mascota.comer(comida)) {
			return;
		}
		// Mensaje de proceso de comer
		try {
			System.out.print(color.getAnsi(String.valueOf(mascota.getColor())) + mascota.getNombre()
					+ color.getAnsi("NARANJA") + " est√° comiendo " + color.getAnsi("VERDE") + comida.getDescripcion()
					+ color.getAnsi("NARANJA") + "...");
			Thread.sleep(500);
			System.out.print(".....");
			Thread.sleep(500);
			System.out.print("....... " + color.getAnsi("RESET"));
		} catch (InterruptedException e) {
			System.out.println("ERROR" + e.getMessage());
			return;
		}
		// Guarda el registro de la alimentaci√≥n
		bdMascotas.registrarAlimentacion(mascota, comida);
		// Chequea la felicidad en cuanto a las otras stats
		mascota.checkFelicidad();
		// Actualiza las stats de la mascota
		bdMascotas.updateStats(mascota);
	}

	/**
	 * Juega con la mascota en funci√≥n de su tipo
	 * 
	 * @param mascota
	 */
	public static void jugarConMascota(Mascota mascota) {
		System.out.println(color.getAnsi("CIAN") + "\nü•é JUEGO CON " + mascota.getNombre().toUpperCase() + " ü•é"
				+ color.getAnsi("RESET"));
		System.out.println(color.getAnsi("AMARILLO") + "‚¨áÔ∏è‚¨áÔ∏è JUEGOS DISPONIBLES ‚¨áÔ∏è‚¨áÔ∏è" + color.getAnsi("RESET"));
		bdJuegos.listaJuegos(mascota.getTipo()).forEach(Juego::mostrarInfo);
		System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Introduce el c√≥digo del juego que quieres jugar: "
				+ color.getAnsi("RESET"));
		String codigoJuego = sc.nextLine();
		Juego juego = bdJuegos.read(codigoJuego);
		if (juego == null) {
			System.err.println("‚òπNO HAY NINGUNA COINCIDENCIA CON EL C√ìDIGO '" + codigoJuego + "'‚òπ");
			return;
		}
		// Comprueba en el caso de existir que sea para el tipo de mascota
		if (!juego.getTipoMascota().equalsIgnoreCase(mascota.getTipo())) {
			System.err.println("‚òπEL C√ìDIGO INTRODUCIDO NO CORRESPONDE AL TIPO DE TU MASCOTA‚òπ");
			return;
		}
		// Si la mascota no quiere jugar vuelve atr√°s
		if (!mascota.jugar(juego)) {
			return;
		}
		// Mensaje de proceso de jugar
		try {
			System.out.print(color.getAnsi(String.valueOf(mascota.getColor())) + mascota.getNombre()
					+ color.getAnsi("NARANJA") + " est√° jugando " + color.getAnsi("VERDE") + juego.getDescripcion()
					+ color.getAnsi("NARANJA") + "...");
			Thread.sleep(500);
			System.out.print(".....");
			Thread.sleep(500);
			System.out.print("....... " + color.getAnsi("RESET"));
		} catch (InterruptedException e) {
			System.out.println("ERROR" + e.getMessage());
			return;
		}
		// Guarda el registro del juego
		bdMascotas.registrarJuego(mascota, juego);
		// Chequea la felicidad en cuanto a las otras stats
		mascota.checkFelicidad();
		// Actualiza las stats de la mascota
		bdMascotas.updateStats(mascota);
	}

	/**
	 * Limpia a la mascota
	 * 
	 * @param mascota
	 */
	public static void limpiarMascota(Mascota mascota) {
		System.out.println(color.getAnsi("CIAN") + "\nüßΩ LIMPIEZA DE " + mascota.getNombre().toUpperCase() + " üßΩ"
				+ color.getAnsi("RESET"));
		// Guardamos la felicidaadAportada antes de que cambie al limpiar, para
		// almacenarlo en la BD
		int felicidadAportada = mascota.felicidadAportadaLimpieza();
		// Si la mascota est√° limpia vuelve atr√°s
		if (!mascota.limpiar()) {
			return;
		}
		// Mensaje de proceso de limpiar
		try {
			System.out.print(color.getAnsi(String.valueOf(mascota.getColor())) + mascota.getNombre()
					+ color.getAnsi("NARANJA") + " se est√° dando un ba√±o...");
			Thread.sleep(500);
			System.out.print(".....");
			Thread.sleep(500);
			System.out.print("....... " + color.getAnsi("RESET"));
		} catch (InterruptedException e) {
			System.out.println("ERROR" + e.getMessage());
			return;
		}
		// Guarda el registro de la limpieza
		bdMascotas.registrarLimpieza(mascota, felicidadAportada);
		// Chequea la felicidad en cuanto a las otras stats
		mascota.checkFelicidad();
		// Actualiza las stats de la mascota
		bdMascotas.updateStats(mascota);
	}

	/**
	 * Finaliza el programa
	 */
	public static void finalizarPrograma() {
		try {
			System.out.println(color.getAnsi("VERDE") + "\nüê• ¬°GRACIAS POR JUGAR! üê•");
			Thread.sleep(500);
			// Cerramos todas las conexiones
			bdUsuarios.cerrarConexion();
			bdMascotas.cerrarConexion();
			bdComidas.cerrarConexion();
			bdJuegos.cerrarConexion();
			System.out.print(color.getAnsi("NARANJA") + "CERRANDO JAVAGOTCHI...");
			Thread.sleep(500);
			System.out.print(".....");
			Thread.sleep(500);
			System.out.print("....... " + color.getAnsi("RESET"));
		} catch (InterruptedException e) {
			System.err.println("ERROR: " + e.getMessage());
		}
	}

}
