package javagotchi;

import java.time.format.DateTimeParseException;
import java.util.*;

/**
 * @author Robert
 * @version 1.0
 * @since 16/05
 */
public class AppJavagotchi {

	private static UsuarioDAO bdUsuarios = new UsuarioDAO();

	private static MascotaDAO bdMascotas = new MascotaDAO();

	private static ComidaDAO bdComidas = new ComidaDAO();

	private static JuegoDAO bdJuegos = new JuegoDAO();

	private static Scanner sc = new Scanner(System.in);

	private static ColorAnsi color = new ColorAnsi();

	/**
	 * M√©todo main
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		int opcion = 0;

		do {
			try {
				mostrarMenuPpal();

				System.out.print(color.getAnsi("AMARILLO") + "‚≠ê OPCI√ìN: " + color.getAnsi("RESET"));
				opcion = sc.nextInt();
				sc.nextLine(); // Limpiar buffer

				switch (opcion) {
				case 1:
					crearUsuario();
					break;
				case 2:
					listaUsuarios();
					break;
				case 3:
					buscarUsuario();

				default:
					break;
				}
			} catch (InputMismatchException e) {
				System.err.println("‚òπERROR‚òπ. Introduce un n√∫mero por favor.");
				sc.nextLine(); // Limpiar buffer
			}
		} while (opcion != 7);

	}

	/**
	 * Muestra el men√∫ principal
	 */
	public static void mostrarMenuPpal() {
		System.out.println("\n" + color.getAnsi("NARANJA")
				+ "     ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó\r\n"
				+ "     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë\r\n"
				+ "     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë\r\n"
				+ "‚ñà‚ñà   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë\r\n"
				+ "‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë\r\n"
				+ " ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù"
				+ color.getAnsi("RESET"));
		System.out.println(color.getAnsi("AMARILLO") + "‚≠ê‚≠ê ELIGE UNA OPCI√ìN ‚≠ê‚≠ê" + color.getAnsi("RESET"));
		System.out.println("1. üë§ Crear usuario üë§");
		System.out.println("2. üë• Listar usuarios üë•");
		System.out.println("3. üîé Buscar usuario üîé");
		System.out.println("4. ‚öô Modificar tu usuario ‚öô");
		System.out.println("5. ‚òπ Eliminar tu usuario ‚òπ");
		System.out.println("6. üê∂ Men√∫ de mascotas üê∂");
		System.out.println("7. üö´ SALIR üö´");
	}

	/**
	 * Crea un usuario y lo a√±ade a la BD
	 */
	public static void crearUsuario() {
		try {
			System.out.println(color.getAnsi("NARANJA") + "üë§ CREACI√ìN DE USUARIO üë§" + color.getAnsi("RESET"));
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Username: " + color.getAnsi("RESET"));
			String username = sc.nextLine();
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Contrase√±a: " + color.getAnsi("RESET"));
			String contrasenia = sc.nextLine();
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Nombre completo: " + color.getAnsi("RESET"));
			String nombreCompleto = sc.nextLine();
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Email: " + color.getAnsi("RESET"));
			String email = sc.nextLine();
			System.out
					.print(color.getAnsi("AMARILLO") + "‚≠ê Fecha de nacimiento (yyyy-MM-dd): " + color.getAnsi("RESET"));
			String fechaNac = sc.nextLine();
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Ciudad: " + color.getAnsi("RESET"));
			String ciudad = sc.nextLine();

			Usuario usuarioNew = new Usuario(username, contrasenia, nombreCompleto, email, fechaNac, ciudad);
			// Si coincide con alg√∫n username de la BD
			if (bdUsuarios.listaUsuarios().contains(usuarioNew)) {
				System.err.println("‚òπERROR‚òπ. Ya existe otro usuario con el mismo username.");
				return;
			}
			// Lo a√±ade a la BD
			bdUsuarios.create(usuarioNew);
		} catch (DateTimeParseException e) {
			System.err.println("‚òπERROR‚òπ. Fecha no v√°lida --> (yyyy-MM-dd)");
			return;
		}
	}

	/**
	 * Muestra los usuarios en el orden asignado
	 */
	public static void listaUsuarios() {
		try {
			System.out.println(color.getAnsi("NARANJA") + "üë• USUARIOS DE JAVAGOTCHI üë•" + color.getAnsi("RESET"));
			System.out.println("\t1. Ordenados por username.");
			System.out.println("\t2. Ordenados por fecha de registro.");
			System.out.print(color.getAnsi("AMARILLO") + "‚≠ê ELIGE EL ORDEN: " + color.getAnsi("RESET"));
			int opcionOrden = sc.nextInt();
			sc.nextLine();
			switch (opcionOrden) {
			case 1:
				System.out.println(
						color.getAnsi("NARANJA") + "üë• USUARIOS ORDENADOS POR USERNAME üë•" + color.getAnsi("RESET"));
				listaUsuariosOrdenUsername(bdUsuarios.listaUsuarios()).forEach(Usuario::mostrarInfoLista);
				break;
			case 2:
				System.out.println(color.getAnsi("NARANJA") + "üë• USUARIOS ORDENADOS POR FECHA DE REGISTRO üë•"
						+ color.getAnsi("RESET"));
				listaUsuariosOrdenFechaRegistro(bdUsuarios.listaUsuarios()).forEach(Usuario::mostrarInfoLista);
				break;
			default:
				System.err.println("‚òπERROR‚òπ. Opci√≥n de orden no v√°lida.");
			}
		} catch (InputMismatchException e) {
			System.err.println("‚òπERROR‚òπ. Introduce un n√∫mero por favor.");
			sc.nextLine(); // Limpia buffer
			return;
		}
	}

	/**
	 * Devuelve la lista de usuarios ordenadas por username
	 * 
	 * @param listaOriginal
	 * @return
	 */
	public static List<Usuario> listaUsuariosOrdenUsername(ArrayList<Usuario> listaOriginal) {
		return listaOriginal.stream().sorted().toList();
	}

	/**
	 * Devuelve la lista de usuarios ordenadas por fecha de registro
	 * 
	 * @param listaOriginal
	 * @return
	 */
	public static List<Usuario> listaUsuariosOrdenFechaRegistro(ArrayList<Usuario> listaOriginal) {
		return listaOriginal.stream().sorted(Comparator.comparing(Usuario::getFechaRegistro)).toList();
	}

	/**
	 * Busca a un usuario en la BD
	 */
	public static void buscarUsuario() {
		System.out.println(color.getAnsi("NARANJA") + "üîé B√öSQUEDA DE USUARIO üîé" + color.getAnsi("RESET"));
		System.out.print(color.getAnsi("AMARILLO") + "‚≠ê Introduce el username a buscar: " + color.getAnsi("RESET"));
		String usernameBusca = sc.nextLine();
		Usuario usuarioBusca = bdUsuarios.read(usernameBusca);
		if (usuarioBusca == null) {
			System.err.println("‚òπ No hay ninguna coincidencia con el username '" + usernameBusca + "' ‚òπ");
			return;
		}
		System.out.println(color.getAnsi("VERDE") + "‚≠ê !USUARIO ENCONTRADO! ‚≠ê" + color.getAnsi("RESET"));
		usuarioBusca.mostrarInfo();	
	}

}
